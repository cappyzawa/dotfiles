use-grammars = { except = [ "hare", "wgsl" ] }

[[language]]
name = "go"
scope = "source.go"
injection-regex = "go"
file-types = ["go"]
roots = ["Gopkg.toml", "go.mod"]
auto-format = true
comment-token = "//"
language-servers = ["gopls"]
indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
auto-format = true
comment-tokens = ["//", "///", "//!"]
language-servers = ["rust-analyzer"]
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "yaml"
scope = "source.yaml"
file-types = ["yml", "yaml"]
comment-token = "#"
auto-format = true
language-servers = ["yaml-language-server"]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "json"
scope = "source.json"
file-types = ["json"]
language-servers = ["vscode-json-language-server"]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml", "Cargo.lock"]
comment-token = "#"
language-servers = ["taplo"]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["md", "markdown", "PULLREQ_EDITMSG", "ISSUE_EDITMSG"]
language-servers = ["marksman"]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "dockerfile"
scope = "source.dockerfile"
injection-regex = "docker|dockerfile"
file-types = ["Dockerfile", "dockerfile"]
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = ["sh", "bash", "zsh", ".zshenv", ".zshrc", ".zprofile", ".bashrc", ".bash_profile", ".bash_login", ".profile", "zsh-theme"]
shebangs = ["sh", "bash", "dash", "zsh"]
comment-token = "#"
language-servers = ["bash-language-server"]
formatter = { command = "shfmt", args = ["-i", "2"] }
auto-format = true
indent = { tab-width = 2, unit = "  " }

# Additional languages from nvim config
[[language]]
name = "css"
scope = "source.css"
file-types = ["css"]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.css"] }
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "html"
scope = "text.html.basic"
file-types = ["html"]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.html"] }
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "javascript"
scope = "source.js"
file-types = ["js", "mjs"]
language-servers = ["typescript-language-server"]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "typescript"
scope = "source.ts"
file-types = ["ts"]
language-servers = ["typescript-language-server"]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "tsx"
scope = "source.tsx"
file-types = ["tsx"]
language-servers = ["typescript-language-server"]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "lua"
scope = "source.lua"
file-types = ["lua"]
language-servers = ["lua-language-server"]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "terraform"
scope = "source.hcl"
file-types = ["tf", "hcl"]
language-servers = ["terraform-ls"]
auto-format = true
indent = { tab-width = 2, unit = "  " }

[language-server.gopls]
command = "gopls"
args = ["serve"]

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.yaml-language-server]
command = "yaml-language-server"
args = ["--stdio"]

[language-server.vscode-json-language-server]
command = "vscode-json-language-server"
args = ["--stdio"]

[language-server.taplo]
command = "taplo"
args = ["lsp", "stdio"]

[language-server.marksman]
command = "marksman"
args = ["server"]

[language-server.bash-language-server]
command = "bash-language-server"
args = ["start"]

[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]

[language-server.lua-language-server]
command = "lua-language-server"

[language-server.terraform-ls]
command = "terraform-ls"
args = ["serve"]
